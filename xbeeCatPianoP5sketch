//visual cat piano by Katie Pulles
//Attributions: All images from pixabay.com with creative commons licenses that require no attribution.
//p5.js serial port code taken and adapted from NYU ITP's Physical Computing Labs, found here: 
//https://itp.nyu.edu/physcomp/labs/labs-serial-communication/two-way-duplex-serial-communication-using-p5js/

var serial; //variable to hold an instance of the serialport library
var portName = '/dev/cu.usbserial-DN0315O5'; //the name of my serial port of the Xbee connected to my comp

//variables to hold cat images:
var cloudCat;
var fatCat;
var flowerCat;
var hiCat;
var hissCat;

//variables to hold state of switch that will come through serial port
var valA;
var valB;
var valC;
var valD;
var valE;

// variables to hold whether or not to show images DONT NEED THIS
// var showImageA;

//load all images in preload function
function preload()
{
	cloudCat=loadImage("https://www.openprocessing.org/sketch/534600/files/cloudCat.png");
	fatCat=loadImage("https://www.openprocessing.org/sketch/534600/files/fatCat.png");
	flowerCat=loadImage("https://www.openprocessing.org/sketch/534600/files/flowerCat.png");
	hiCat=loadImage("https://www.openprocessing.org/sketch/534600/files/hiCat.png");
	hissCat=loadImage("https://www.openprocessing.org/sketch/534600/files/hissCat.png");
}

function setup() 
{
	createCanvas(1000,800); //create a canvas at these dimensions
	background(0); //background color black
	imageMode(CENTER); //images appear from their centers
	
	serial = new p5.SerialPort(); //make new instance of serial port library
	serial.on('list', printList); //set a callback function for the serialport list event
	serial.on('connected', serverConnected); //set a callback function for connecting to the server
	serial.on('open', portOpen); //set a callback function for when port is open
	serial.on('data', serialEvent); //set a callback function for new data arrival
	serial.on('error', serialError); //set a callback for errors
	serial.on('close', portClose); //set a callback function for when port is closed
	
	
	serial.list(); //list the serial ports
	serial.open(portName); //open the specificed port, in this case the usb port the Xbee is connected to
}

function serverConnected()
{
  println('connected to server.');
}

function portOpen()
{
  println('the serial port opened.');
}

function serialEvent()
{
	//read a string from the serial port
	//until you get carriage return and newline:
  var inString=serial.readStringUntil('\r\n');
	
	//check to see that there's actually a string there:
	if(inString.length>0)
	{
		var sensors = split(inString, ','); //split the string on the commas
		if(sensors.length>4) //if there are 5 elements
		{
			valA=sensors[0]; //element 0 from array is valA
			valB=sensors[1]; //element 1 is valB
			valC=sensors[2]; //element 2 is valC
			valD=sensors[3]; //element 3 is valD
			valE=sensors[4]; //element 4 is valE
		}
	}
}

function serialError(err)
{
  println('Something went wrong with the serial port.' + err);
}

function portClose()
{
  println('The serial port closed.');
}
// get the list of ports:
function printList(portList) {
 // portList is an array of serial port names
 for (var i = 0; i < portList.length; i++) {
 // Display the list the console:
 println(i + " " + portList[i]);
 }
}

//I used individual functions for each image to make a more succint draw function
function cloud() //placement of first image
{
	push();
	//scale(0.25);
	image(cloudCat, 550,420, 300,300);
	pop();
}

function fat() //placement of second image
{
	push();
	scale(0.75);
	image(fatCat, 350,250);
	pop();
}

function flower()//placement of third image
{
	push();
	image(flowerCat, 800, 200);
	pop();
}

function hi() //placement of fourth image
{
	push();
	image(hiCat, 200,600);
	pop();
}

function hiss() //placement of fifth image
{
	push();
	image(hissCat, 850, 650, 350, 340);
	pop();
}

function draw() 
{	
 background(0); //call background so cats disappear when piano not pressed
	
	if(valA==0) //piano is active low so switch reads '0' when pressed
	{
		cloud();
	}
	
	if(valB==0)
	{
		fat();
	}
	
	if(valC==0)
	{
		flower();
	}
	
	if(valD==0)
	{
		hi();
	}
	
	if(valE==0)
	{
		hiss();
	}
}

// function switchState() DONT NEED THIS
// {
// 	if(valA==0)
// 	{
// 		showImageA=true;
// 	}	
// 	else if(valA==1)
// 	{
// 		showImageA=false;
// 	}
// }
